{#
/**
 * @file
 * flickity carousel
 * https://flickity.metafizzy.co/options.html#percentposition
 *
 * Available variables for flickity carousel:
 *  - id [string]: Carousel ID.
 *  - show_controls [bool]: Show custom UI controls.
 *  - draggable [bool]: Enables dragging and flicking. Enabled by default when carousel has 2 or more slides
 *  - freeScroll [bool]: Enables content to be freely scrolled and flicked without aligning cells to an end position.
 *  - wrapAround [bool]: At the end of cells, wrap-around to the other end for infinite scrolling.
 *  - groupCells [bool, int, string]: Groups cells together in slides. Flicking, page dots, and previous/next buttons are mapped to group slides, not individual cells.
 *  - autoPlay [bool | int]: Auto-playing will pause when mouse is hovered over, and resume when mouse is hovered off. Auto-playing will stop when the carousel is clicked or a cell is selected.
 *  = pauseAutoPlayOnHover [bool]: Pause auto-playing on hover.
 *  - fullscreen [bool]: Enables fullscreen view of carousel. Adds button to view and exit fullscreen. In fullscreen view, pressing ESC will exit fullscreen.
 *  - fade [bool]: Fades between transitioning slides instead of moving.
 *  - adaptiveHeight [bool]: Changes height of carousel to fit height of selected slide.
 *  - asNavFor [string]: Use one Flickity carousel as navigation for another.
 *  - cellSelector [string]: Specify selector for cell elements. cellSelector is useful if you have other elements in your carousel elements that are not cells.
 *  - initialIndex [int]: Zero-based index of the initial selected cell.
 *  - setGallerySize [bool]: Sets the height of the carousel to the height of the tallest cell.
 *  - cellAlign [string]: Align cells within the carousel element.
 *  - contain [bool]: Contains cells to carousel element to prevent excess scroll at beginning or end.
 *  - rightToLeft [bool]: Enables right-to-left layout.
 *  - prevNextButtons [bool]: Creates and enables previous & next buttons.
 *  - pageDots [bool]: Creates and enables page dots.
 *  - arrowShape [string]: Draws the shape of the arrows in the previous & next buttons.
 *  - columns [integer 1-6]: Number of colums for slide sizing.
 *  - flickity_carousel_classes [array]: Additional component classes.
 *  - flickity_carousel_other_classes [string]: Additional component classes.
 *  - drag_threshold [int]: The number of pixels a mouse or touch has to move before dragging begins.
 *  - selected_attraction [float]: Attracts the position of the slider to the selected cell.
 *  - friction [float]: Slows the movement of slider
 *  - free_scroll_friction [float]: Slows movement of slider when freeScroll: true
 *  - percent_position [bool]: Sets positioning in percent values, rather than pixel values.
 */
#}

{% set flickity_wrapper_classes = flickity_wrapper_classes|default([])|merge([
  'flickity-carousel--wrapper',
  columns ? 'flickity-cols-' ~ columns,
  flickity_wrapper_other_classes,
]) | sort | join(' ') | trim %}

{% set flickity_wrapper_attributes = flickity_wrapper_attributes|default([])|merge([
  flickity_wrapper_classes ? 'class="' ~ flickity_wrapper_classes ~ '"',
  flickity_wrapper_other_attributes,
]) | sort | join(' ') | trim %}

{% set carouselId = [] %}
{% set alpha = 'abcdefghijklmnopqrstuvwxyz' %}
{% set num = '0123456789' %}
{% for i in 1..10 %}
  {% set char = random(alpha ~ alpha|upper ~ num ~ '-_') %}
  {% set carouselId = carouselId|merge([char]) %}
{% endfor %}
{% set carouselId = 'flickityCarousel' ~ carouselId|join %}

{% set flickity_carousel_classes = flickity_carousel_classes|default([])|merge([
  'flickity-carousel',
  flickity_carousel_other_classes,
]) | sort | join(' ') | trim %}

{% set flickity_carousel_attributes = flickity_carousel_attributes|default([])|merge([
  'id="' ~ id|default(carouselId) ~ '"',
  flickity_carousel_classes ? 'class="' ~ flickity_carousel_classes ~ '"',
  'data-cellSelector="' ~ cellSelector|default('.carousel-cell') ~ '"',
  'data-dragthreshold="' ~ drag_threshold|default(3) ~ '"',
  'data-selectedattraction="' ~ selected_attraction|default(0.025) ~ '"',
  'data-friction="' ~ friction|default(0.28) ~ '"',
  'data-freescrollfriction="' ~ free_scroll_friction|default(0.075) ~ '"',
  'data-cellalign="' ~ cellAlign|default('left') ~ '"',
  nojs == true ? 'data-nojs="true"' : 'data-nojs="false"',
  draggable == true ? 'data-draggable="true"' : 'data-draggable="false"',
  freeScroll == true ? 'data-freescroll="true"' : 'data-freescroll="false"',
  wrapAround == true ? 'data-wraparound="true"' : 'data-wraparound="false"',
  groupCells == true ? 'data-groupcells="true"' : 'data-groupcells="false"',
  autoPlay is not empty ? 'data-autoplay="' ~ autoPlay ~ '"' : 'data-autoplay="false"',
  pauseAutoPlayOnHover == true ? 'data-pauseautoplay="true"' : 'data-pause-autoplay="false"',
  fullscreen == true ? 'data-fullscreen="true"' : 'data-fullscreen="false"',
  fade == true ? 'data-fade="true"' : 'data-fade="false"',
  adaptiveHeight == true ? 'data-adaptiveheight="true"' : 'data-adaptiveheight="false"',
  asNavFor ? 'data-asnavfor="' ~ asNavFor ~ '"',
  initialIndex ? 'data-initialIndex="' ~ initialIndex ~ '"',
  setGallerySize == true or setGallerySize is empty ? 'data-setgallerysize="true"' : 'data-setgallerysize="false"',
  contain == true ? 'data-contain="true"' : 'data-contain="false"',
  rightToLeft == true ? 'data-righttoleft="true"' : 'data-righttoleft="false"',
  prevNextButtons == true ? 'data-prevnextbuttons="true"' : 'data-prevnextbuttons="false"',
  pageDots == true ? 'data-pagedots="true"' : 'data-pagedots="false"',
  percent_position == true ? 'data-percentposition="true"' : 'data-percentposition="false"',
  flickity_carousel_other_attributes,
]) | sort | join(' ') | trim %}

{# TODO: Pass arrowShape in as data attribute #}

<div {{ flickity_wrapper_attributes }}>
  {% block slider %}
    <div {{ flickity_carousel_attributes }}>
      {% block slides %}
        {% for slide in slides %}
          <div class="carousel-cell">{{ slide }}</div>
        {% endfor %}
      {% endblock slides %}
    </div>
  {% endblock slider %}
{#  {% set show_controls = show_controls|default('true') %}#}
  {% if show_controls == 'true' %}
    <div class="button--row">
      <button class="button button--previous">&larr;</button>
      <div class="button--group button--group-cells">
        {% for slide in slides %}
          <button class="button {{ loop.first ? 'is-selected' }}">{{ loop.index }}</button>
        {% endfor %}
      </div>
      <button class="button button--next">&rarr;</button>
    </div>
  {% endif %}
</div>

